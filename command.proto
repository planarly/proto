syntax = "proto3";

import "common.proto";

package PlanProto;


message InsertRowsCols {
  // if empty, use the channel's subscribed sheet
  string sheet_id = 1;
  Orientation orientation = 2;
  int32 vpos = 3; // inserted will start appearing at vpos
  int32 n = 4;
}


message RemoveRowsCols {
  // if empty, use the channel's subscribed sheet
  string sheet_id = 1;
  Orientation orientation = 2;
  int32 vpos = 3;
  int32 n = 4;
}


message SetLabels {
  // if empty, use the channel's subscribed sheet
  string sheet_id = 1;
  repeated string labels = 5;
  int32 rv = 3;
  int32 cv = 4;
  bool  force = 6;
}


message AddLabels {
  // if empty, use the channel's subscribed sheet
  string sheet_id = 1;
  repeated string labels = 2;
  int32 rv = 3;
  int32 cv = 4;
  bool  force = 6;
}


message DelLabel {
  // if empty, use the channel's subscribed sheet
  string sheet_id = 1;
  string label = 2;
}


message SetFeLabelCode {
  // if empty, use the channel's subscribed sheet
  string sheet_id = 1;
  string label = 2;
  int32 rf = 3;
  int32 cf = 5;
  bool force = 7;
  string code = 8;
  bytes literal_value = 10;
  VType literal_vtype = 12;
  string literal_metadata = 811;
  bool hidden = 9;
}


message SetFeCode {
  // if empty, use the channel's subscribed sheet
  string sheet_id = 1;
  int32 rf = 2;
  int32 cf = 4;
  string code = 6;
  bytes literal_value = 10;
  VType literal_vtype = 9;
  string literal_metadata = 8;
  bool hidden = 7;
}


message SetCode {
  // if empty, use the channel's subscribed sheet
  string sheet_id = 1;
  int32 rv = 2;
  int32 cv = 3;
  string code = 4;
  bool hidden = 5;
  bytes literal_value = 6;
  VType literal_vtype = 9;
  string literal_metadata = 8;
}


message SetCodes {
  // if empty, use the channel's subscribed sheet
  string sheet_id = 1;
  int32 rv = 2;
  int32 cv = 3;
  int32 rows = 4;
  int32 cols = 5;
  repeated string codes = 6; // row by row

  // should correspond to `codes` one by one
  // if not enough, missing ones are considered `false`
  repeated bool hiddens = 7;
  repeated bytes literal_values = 10;
  repeated VType literal_vtypes = 9;
  repeated string literal_metadatas = 8;
}


message AddProperty {
  // key
  // if empty, use the channel's subscribed sheet
  string sheet_id = 1;
  string property_id = 2;
  // values
  string from = 3;
  string to = 4;
  string property_code = 5;
  int32 priority = 6;
}


message SetProperty {
  // key
  // if empty, use the channel's subscribed sheet
  string sheet_id = 1;
  string property_id = 2;
  // values
  bool skip_from = 3;
  string from = 4;
  bool skip_to = 5;
  string to = 6;
  bool skip_property_code = 7;
  string property_code = 8;
  bool skip_priority = 9;
  int32 priority = 10;
}

message SetProperties {
  repeated SetProperty setproperty = 1;
}

message MoveProperty {
  // key
  // if empty, use the channel's subscribed sheet
  string sheet_id = 1;
  string property_id = 2;
  // values
  int32 priority = 3;
}


message SetTwitProperty {
  // key
  // if empty, use the channel's subscribed sheet
  string sheet_id = 1;
  string twit_property_id = 2;
  // values
  bool skip_tags = 3;
  repeated string tags = 4;
  bool skip_verb = 5;
  TwitPropertyVerb verb = 6;
  bool skip_region = 7;
  string region = 8;
  bool skip_property_code = 9;
  string property_code = 10;
  bool skip_priority = 11;
  int32 priority = 12;
}


message MoveTwitProperty {
  // key
  // if empty, use the channel's subscribed sheet
  string sheet_id = 1;
  string property_id = 2;
  // values
  int32 priority = 4;
}


message SetLabelsCode {
  // if empty, use the channel's subscribed sheet
  string sheet_id = 1;
  repeated string labels = 2;
  int32 rv = 3;
  int32 cv = 4;
  string code = 5;
  bytes literal_value = 8;
  VType literal_vtype = 9;
  string literal_metadata = 10;
  bool hidden = 7;
  bool  force = 6;
}


message SetFeHBarrier {
  // if empty, use the channel's subscribed sheet
  string sheet_id = 1;
  int32 rf = 2;
  bool on = 3;
}


message SetFeVBarrier {
  // if empty, use the channel's subscribed sheet
  string sheet_id = 1;
  int32 cf = 2;
  bool on = 3;
}


message SetBarrier {
  // if empty, use the channel's subscribed sheet
  string sheet_id = 1;
  Orientation orientation = 2;
  int32 vpos = 3;
  bool on = 4;
}


message SetNodeConfig {
  // if empty, use the channel's subscribed sheet
  string node_id = 1;
  string name = 2;
  string code = 3;
}

message SetNodeConfigs {
  // if empty, use the channel's subscribed sheet
  repeated string node_ids = 1;
  repeated string names = 2;
  repeated string codes = 3;
}

message SetNodeStatus {
  // if empty, use the channel's subscribed sheet
  string node_id = 1;
  string name = 2;
  Table value = 3;
}


// only valid when channel subscription is PAGE
message SetInput {
  // if empty, use the channel's subscribed sheet
  string sheet_id = 1;
  int32 rv = 2;
  int32 cv = 3;
  string overlay = 4;
  string value = 5;
  VType vtype = 6; // empty to clear the substitution
  string metadata = 7;
}


// TODO: remove
message SetNodeConfigInOverlay {
  // if empty, use the channel's subscribed sheet
  string node_id = 1;
  string name = 2;
  string overlay = 3;
  Table value = 4;
}


message SetLabelValueInOverlay {
  // if empty, use the channel's subscribed sheet
  string sheet_id = 1;
  string label = 2;
  string overlay = 3;
  Table value = 4;
}


message SetVarInOverlay {
  // if empty, use the channel's subscribed sheet
  string node_id = 1;
  string name = 2;
  QueryParameter overlay = 3;
}


message SetGlobalVar {
  string name = 1;
  Table value = 2;
}


message SetGlobalVarInOverlay {
  string name = 1;
  Table value = 2;
  QueryParameter overlay = 3;
}


message LoadDoc {
  string xml = 1; // deprecated
  string axiom = 4; // use axiom dump json instead
  bool suppress_res_tree = 2;

  // if set, ignore the xml/axiom fields and load a new default document with Root.sheet1
  bool load_default_doc = 3;
}


// deprecated; use AddNode(type="Sheet") ?
message AddSheet {
  string parent_id = 1;
  string name = 2;
}


message AddNode {
  string node_id = 4; // either empty or nil UUID means to assign automatically
  string parent_id = 2;
  string name = 3;
  NodeType type = 5;
}


message MoveNode {
  string node_id = 1;
  string parent_id = 2;
  string name = 3;
}


message RemoveNode {
  string node_id = 1;
}


message SetDocOption {
  string name = 1;
  string value = 2;
}


message RunMacro {
  string node_id = 1;
  string code = 2;
}


message InvokeEvent {
  string node_id = 2;
  string event = 3;
  int32 rv = 5;
  int32 cv = 6;
}
